jenkins:
  systemMessage: "Jenkins skonfigurowany przez JCasC"
  numExecutors: 4
  scmCheckoutRetryCount: 3
  mode: NORMAL
  clouds:
    - docker:
        name: "docker"
        templates:
          - labelString: "docker-agent"
            dockerTemplateBase:
              image: "jenkins/agent:latest"
              pullTimeout: 300
              pullStrategy: PULL_ALWAYS
            remoteFs: "/home/jenkins/agent"
            connector:
              attach:
                user: "jenkins"
            instanceCapStr: "10"
            retentionStrategy:
              idleMinutes: 10

  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "${JENKINS_ADMIN_PASSWORD}"
        - id: "developer"
          password: "${JENKINS_DEV_PASSWORD}"

  authorizationStrategy:
    roleBased:
      roles:
        global:
          - name: "admin"
            permissions:
              - "Overall/Administer"
            assignments:
              - "admin"
          - name: "developer"
            permissions:
              - "Overall/Read"
              - "Job/Build"
              - "Job/Read"
              - "Job/Cancel"
              - "Job/Workspace"
            assignments:
              - "developer"
          - name: "viewer"
            permissions:
              - "Overall/Read"
              - "Job/Read"
            assignments:
              - "viewer"

tool:
  git:
    installations:
      - name: "Default"
        home: "git"
  maven:
    installations:
      - name: "Maven 3.8.6"
        home: "/usr/share/maven"
        properties:
          - installSource:
              installers:
                - maven:
                    id: "3.8.6"
  nodejs:
    installations:
      - name: "NodeJS 18"
        home: "/usr/local/nodejs"
        properties:
          - installSource:
              installers:
                - nodeJS:
                    id: "18.16.0"
  docker:
    installations:
      - name: "Docker"
        home: "/usr/bin/docker"

unclassified:
  location:
    url: "http://localhost:8080"
  timestamper:
    allPipelines: true
  gitHubConfiguration:
    apiRateLimitChecker: ThrottleForNormalize
  slackNotifier:
    teamDomain: "your-team"
    tokenCredentialId: "slack-token"
  gitHubPluginConfig:
    apiRateLimitChecker: ThrottleForNormalize

jobs:
  - script: >
      pipelineJob('example-pipeline') {
        definition {
          cps {
            script('''
              pipeline {
                agent {
                  docker {
                    image 'maven:3.8.6-openjdk-11'
                    args '-v $HOME/.m2:/root/.m2'
                  }
                }
                environment {
                  DOCKER_REGISTRY = 'your-registry.com'
                  DOCKER_IMAGE = 'example-app'
                  MAVEN_OPTS = '-Dmaven.repo.local=/root/.m2/repository'
                }
                stages {
                  stage('Checkout') {
                    steps {
                      checkout scm
                    }
                  }
                  stage('Build') {
                    steps {
                      sh 'mvn clean package -DskipTests'
                    }
                  }
                  stage('Test') {
                    steps {
                      sh 'mvn test'
                    }
                    post {
                      always {
                        junit '**/target/surefire-reports/*.xml'
                        jacoco(
                          execPattern: '**/target/jacoco.exec',
                          classPattern: '**/target/classes',
                          sourcePattern: '**/src/main/java'
                        )
                      }
                    }
                  }
                  stage('Docker Build') {
                    steps {
                      script {
                        def dockerImage = docker.build("${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}")
                        docker.withRegistry("https://${DOCKER_REGISTRY}") {
                          dockerImage.push()
                          if (env.BRANCH_NAME == 'main') {
                            dockerImage.push('latest')
                          }
                        }
                      }
                    }
                  }
                }
                post {
                  always {
                    cleanWs()
                  }
                  success {
                    slackSend(
                      channel: '#jenkins',
                      color: 'good',
                      message: "Build ${env.JOB_NAME} #${env.BUILD_NUMBER} zakończony sukcesem"
                    )
                  }
                  failure {
                    slackSend(
                      channel: '#jenkins',
                      color: 'danger',
                      message: "Build ${env.JOB_NAME} #${env.BUILD_NUMBER} zakończony niepowodzeniem"
                    )
                  }
                }
              }
            ''')
          }
        }
        triggers {
          cron('H/15 * * * *')
        }
        properties {
          pipelineTriggers {
            triggers {
              pollSCM {
                scmpoll_spec('H/5 * * * *')
              }
            }
          }
        }
      }

security:
  scriptApproval:
    approvedSignatures:
      - method groovy.lang.Binding getVariable java.lang.String
      - method hudson.model.ItemGroup getItem java.lang.String
      - method jenkins.model.Jenkins getItemByFullName java.lang.String
      - method jenkins.model.Jenkins getItemByFullName java.lang.String boolean
      - method org.jenkinsci.plugins.workflow.job.WorkflowJob getProperty java.lang.Class
      - method org.jenkinsci.plugins.workflow.cps.CpsScript getProperty java.lang.String
      - method org.jenkinsci.plugins.workflow.cps.CpsScript getBinding
      - method org.jenkinsci.plugins.workflow.cps.CpsScript getContext
      - method org.jenkinsci.plugins.workflow.cps.CpsScript getClass
      - method org.jenkinsci.plugins.workflow.cps.CpsScript getMetaClass
      - method org.jenkinsci.plugins.workflow.cps.CpsScript setProperty java.lang.String java.lang.Object
      - method org.jenkinsci.plugins.workflow.cps.CpsScript setBinding groovy.lang.Binding
      - method org.jenkinsci.plugins.workflow.cps.CpsScript setContext java.lang.Object
      - method org.jenkinsci.plugins.workflow.cps.CpsScript setMetaClass groovy.lang.MetaClass

plugins:
  required:
    - name: "git"
      version: "4.11.0"
    - name: "workflow-aggregator"
      version: "2.6"
    - name: "configuration-as-code"
      version: "1.55"
    - name: "docker-workflow"
      version: "1.28"
    - name: "pipeline-model-definition"
      version: "1.9.3"
    - name: "maven-plugin"
      version: "3.19"
    - name: "nodejs"
      version: "1.5.0"
    - name: "role-strategy"
      version: "3.1.1"
    - name: "timestamper"
      version: "1.13"
    - name: "slack"
      version: "2.45"
    - name: "jacoco"
      version: "3.3.2"
    - name: "junit"
      version: "1.57"
    - name: "docker-plugin"
      version: "1.2.10"
    - name: "docker-java-api"
      version: "3.1.5.2"
    - name: "docker-commons"
      version: "1.17"
    - name: "credentials-binding"
      version: "1.27"
    - name: "git-parameter"
      version: "0.9.16"
    - name: "pipeline-github"
      version: "2.7"
    - name: "pipeline-utility-steps"
      version: "2.13.0" 